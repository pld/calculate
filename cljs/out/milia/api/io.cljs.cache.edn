{:rename-macros {}, :renames {}, :use-macros {join clojure.string, go cljs.core.async.macros, rename-keys clojure.set, split clojure.string, blank? clojure.string}, :excludes #{}, :name milia.api.io, :imports {XhrIo goog.net.XhrIo, IframeIo goog.net.IframeIo}, :requires {http-core cljs-http.core, goog.net.cookies goog.net.cookies, cljs-http.core cljs-http.core, gev goog.events, IframeIo goog.net.IframeIo, cljs-http.client cljs-http.client, cljs-hash.md5 cljs-hash.md5, cljs.core.async cljs.core.async, chimera.seq chimera.seq, clojure.set clojure.set, cookies goog.net.cookies, XhrIo goog.net.XhrIo, chimera.string chimera.string, clojure.string clojure.string, milia.utils.remote milia.utils.remote, goog.events goog.events, http cljs-http.client}, :uses {<! cljs.core.async, join clojure.string, chan cljs.core.async, *credentials* milia.utils.remote, md5 cljs-hash.md5, hosts milia.utils.remote, is-not-null? chimera.string, bad-token-msgs milia.utils.remote, in? chimera.seq, rename-keys clojure.set, split clojure.string, put! cljs.core.async, blank? clojure.string}, :defs {build-http-options {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/api/io.cljs", :line 18, :column 7, :end-line 18, :end-column 25, :arglists (quote ([http-options method no-cache?])), :doc "Build http-options based on arguments."}, :name milia.api.io/build-http-options, :variadic false, :file "resources/public/cljs/out/milia/api/io.cljs", :end-column 25, :method-params ([http-options method no-cache?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 3, :fn-var true, :arglists (quote ([http-options method no-cache?])), :doc "Build http-options based on arguments."}, raw-request {:name milia.api.io/raw-request, :file "resources/public/cljs/out/milia/api/io.cljs", :line 36, :column 1, :end-line 36, :end-column 17, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/api/io.cljs", :line 36, :column 6, :end-line 36, :end-column 17}, :doc "An almost 'batteries-included' request, similar to cljs-http.client/request.\n   Contains everything except response decoding."}, token->headers {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/api/io.cljs", :line 51, :column 7, :end-line 51, :end-column 21, :arglists (quote ([& {:keys [get-crsftoken? must-revalidate? accept-header auth-token]}])), :doc "Builds request headers for the HTTP request by adding\n  Authorization, X-CSRFToken and Cache-control headers where necessary", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [get-crsftoken? must-revalidate? accept-header auth-token]})], :arglists ([& {:keys [get-crsftoken? must-revalidate? accept-header auth-token]}]), :arglists-meta (nil)}}, :name milia.api.io/token->headers, :variadic true, :file "resources/public/cljs/out/milia/api/io.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [({:keys [get-crsftoken? must-revalidate? accept-header auth-token]})], :arglists ([& {:keys [get-crsftoken? must-revalidate? accept-header auth-token]}]), :arglists-meta (nil)}, :method-params [({:keys [get-crsftoken? must-revalidate? accept-header auth-token]})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 0, :fn-var true, :arglists ([& {:keys [get-crsftoken? must-revalidate? accept-header auth-token]}]), :doc "Builds request headers for the HTTP request by adding\n  Authorization, X-CSRFToken and Cache-control headers where necessary"}, get-xhr-io-response {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/api/io.cljs", :line 70, :column 7, :end-line 70, :end-column 26, :arglists (quote ([io-obj & [{:keys [require-json?], :or {:require-json? true}}]])), :doc "Get the response out of an object that watches an async/xhr request.\n   JsIoObject, Maybe {Keyword Bool} -> {:keyword }", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(io-obj [{:keys [require-json?], :or {:require-json? true}}])], :arglists ([io-obj & [{:keys [require-json?], :or {:require-json? true}}]]), :arglists-meta (nil)}}, :name milia.api.io/get-xhr-io-response, :variadic true, :file "resources/public/cljs/out/milia/api/io.cljs", :end-column 26, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(io-obj [{:keys [require-json?], :or {:require-json? true}}])], :arglists ([io-obj & [{:keys [require-json?], :or {:require-json? true}}]]), :arglists-meta (nil)}, :method-params [(io-obj [{:keys [require-json?], :or {:require-json? true}}])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 1, :fn-var true, :arglists ([io-obj & [{:keys [require-json?], :or {:require-json? true}}]]), :doc "Get the response out of an object that watches an async/xhr request.\n   JsIoObject, Maybe {Keyword Bool} -> {:keyword }"}, upload-via-iframe {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/api/io.cljs", :line 81, :column 7, :end-line 81, :end-column 24, :arglists (quote ([form form-api event-chan]))}, :name milia.api.io/upload-via-iframe, :variadic false, :file "resources/public/cljs/out/milia/api/io.cljs", :end-column 24, :method-params ([form form-api event-chan]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 3, :fn-var true, :arglists (quote ([form form-api event-chan]))}, upload-file {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/api/io.cljs", :line 93, :column 7, :end-line 93, :end-column 18, :arglists (quote ([form chan & {:keys [headers id require-json?], :or {:require-json? true}}])), :doc "Use goog.net.XhrIo to upload file. Receives an HTML form object,\n  a core.async channel where result message will be put\n  and (optionally) an id to include in the result message. Returns the\n  XhrIo object that can be used to abort request. More XhrIo API\n  docs at: https://goo.gl/B0fm2a", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(form chan {:keys [headers id require-json?], :or {:require-json? true}})], :arglists ([form chan & {:keys [headers id require-json?], :or {:require-json? true}}]), :arglists-meta (nil)}}, :name milia.api.io/upload-file, :variadic true, :file "resources/public/cljs/out/milia/api/io.cljs", :end-column 18, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(form chan {:keys [headers id require-json?], :or {:require-json? true}})], :arglists ([form chan & {:keys [headers id require-json?], :or {:require-json? true}}]), :arglists-meta (nil)}, :method-params [(form chan {:keys [headers id require-json?], :or {:require-json? true}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 2, :fn-var true, :arglists ([form chan & {:keys [headers id require-json?], :or {:require-json? true}}]), :doc "Use goog.net.XhrIo to upload file. Receives an HTML form object,\n  a core.async channel where result message will be put\n  and (optionally) an id to include in the result message. Returns the\n  XhrIo object that can be used to abort request. More XhrIo API\n  docs at: https://goo.gl/B0fm2a"}, http-request {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/api/io.cljs", :line 124, :column 7, :end-line 124, :end-column 19, :arglists (quote ([request-fn & args])), :doc "Wraps cljs-http.client/request and redirects if status is 401", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(request-fn args)], :arglists ([request-fn & args]), :arglists-meta (nil)}}, :name milia.api.io/http-request, :variadic true, :file "resources/public/cljs/out/milia/api/io.cljs", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(request-fn args)], :arglists ([request-fn & args]), :arglists-meta (nil)}, :method-params [(request-fn args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 124, :end-line 124, :max-fixed-arity 1, :fn-var true, :arglists ([request-fn & args]), :doc "Wraps cljs-http.client/request and redirects if status is 401"}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:auth-token :must-revalidate? :json-params :patch :else :temp-token :password :username :loaded :recur :get-crsftoken? :headers :length-computable :token :total :with-credentials? :form-params :status :id :query-params :post :error :t :put :accept-header :progress :success? :basic-auth :require-json? :data}, :order [:post :put :patch :form-params :query-params :with-credentials? :username :password :basic-auth :json-params :t :get-crsftoken? :must-revalidate? :accept-header :auth-token :token :temp-token :require-json? :error :else :data :headers :id :success? :progress :length-computable :loaded :total :recur :status]}, :doc nil}