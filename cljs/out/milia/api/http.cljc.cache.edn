{:rename-macros {}, :renames {}, :use-macros {go cljs.core.async.macros, rename-keys clojure.set}, :excludes #{}, :name milia.api.http, :imports nil, :requires {clojure.set clojure.set, milia.api.io milia.api.io, cljs-hash.md5 cljs-hash.md5, http cljs-http.client, cljs-http.client cljs-http.client, async cljs.core.async, cljs.core.async cljs.core.async}, :uses {<! cljs.core.async, build-http-options milia.api.io, md5 cljs-hash.md5, token->headers milia.api.io, raw-request milia.api.io, rename-keys clojure.set, http-request milia.api.io}, :defs {parse-http {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/api/http.cljc", :line 20, :column 7, :end-line 20, :end-column 17, :arglists (quote ([method url & {:keys [accept-header callback filename http-options suppress-4xx-exceptions? raw-response? as-map? no-cache? must-revalidate? auth-token]}])), :doc "Send and parse an HTTP response as JSON.\n   Additional arguments modify beavior of parse-http:\n   In both: `raw-response?`, `filename`, `http-options`.\n   In CLJ: `suppress-4xx-exceptions?`, `as-map?`.\n   In CLJS: `accept-header` `callback`, `no-cache?`.\n   When a request fails for one of the following reasons, an exception is thrown\n   with a map containing a `:reason` key, and an optional `:detail` key\n    1. No response: {:reason :no-http-response}\n    2. 4xx response: {:reason :http-client-error\n                      :detail {:status-code <status-code>\n                               :response <parsed-json-from-server>}\n    3. 5xx response: {:reason :http-server-error\n                      :detail {:response <raw-response>\n                               :status-code <status-code>}", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(method url {:keys [accept-header callback filename http-options suppress-4xx-exceptions? raw-response? as-map? no-cache? must-revalidate? auth-token]})], :arglists ([method url & {:keys [accept-header callback filename http-options suppress-4xx-exceptions? raw-response? as-map? no-cache? must-revalidate? auth-token]}]), :arglists-meta (nil)}}, :name milia.api.http/parse-http, :variadic true, :file "resources/public/cljs/out/milia/api/http.cljc", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(method url {:keys [accept-header callback filename http-options suppress-4xx-exceptions? raw-response? as-map? no-cache? must-revalidate? auth-token]})], :arglists ([method url & {:keys [accept-header callback filename http-options suppress-4xx-exceptions? raw-response? as-map? no-cache? must-revalidate? auth-token]}]), :arglists-meta (nil)}, :method-params [(method url {:keys [accept-header callback filename http-options suppress-4xx-exceptions? raw-response? as-map? no-cache? must-revalidate? auth-token]})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists ([method url & {:keys [accept-header callback filename http-options suppress-4xx-exceptions? raw-response? as-map? no-cache? must-revalidate? auth-token]}]), :doc "Send and parse an HTTP response as JSON.\n   Additional arguments modify beavior of parse-http:\n   In both: `raw-response?`, `filename`, `http-options`.\n   In CLJ: `suppress-4xx-exceptions?`, `as-map?`.\n   In CLJS: `accept-header` `callback`, `no-cache?`.\n   When a request fails for one of the following reasons, an exception is thrown\n   with a map containing a `:reason` key, and an optional `:detail` key\n    1. No response: {:reason :no-http-response}\n    2. 4xx response: {:reason :http-client-error\n                      :detail {:status-code <status-code>\n                               :response <parsed-json-from-server>}\n    3. 5xx response: {:reason :http-server-error\n                      :detail {:response <raw-response>\n                               :status-code <status-code>}"}}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :cljs.analyzer/constants {:seen #{:suppress-4xx-exceptions? :auth-token :must-revalidate? :get :else :method :no-cache? :recur :get-crsftoken? :headers :filename :raw-response? :url :accept-header :http-options :callback :as-map?}, :order [:http-options :accept-header :callback :as-map? :auth-token :suppress-4xx-exceptions? :must-revalidate? :no-cache? :filename :raw-response? :get-crsftoken? :get :headers :method :url :recur :else]}, :doc nil}