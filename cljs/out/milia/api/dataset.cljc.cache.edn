{:rename-macros {}, :renames {}, :use-macros {join clojure.string}, :excludes #{update clone}, :name milia.api.dataset, :imports nil, :requires {chimera.seq chimera.seq, clojure.string clojure.string, milia.api.http milia.api.http, milia.utils.metadata milia.utils.metadata, milia.utils.remote milia.utils.remote}, :uses {parse-http milia.api.http, has-keys? chimera.seq, make-j2x-url milia.utils.remote, join clojure.string, make-url milia.utils.remote, in? chimera.seq, make-client-url milia.utils.remote, metadata-files milia.utils.metadata}, :defs {form {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/api/dataset.cljc", :line 173, :column 7, :end-line 173, :end-column 11, :arglists (quote ([dataset-id] [dataset-id format])), :doc "Download form as JSON string or file in specified format if format passed.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([dataset-id] [dataset-id format]), :arglists ([dataset-id] [dataset-id format]), :arglists-meta (nil nil)}}, :name milia.api.dataset/form, :variadic false, :file "resources/public/cljs/out/milia/api/dataset.cljc", :end-column 11, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([dataset-id] [dataset-id format]), :arglists ([dataset-id] [dataset-id format]), :arglists-meta (nil nil)}, :method-params ([dataset-id] [dataset-id format]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 173, :end-line 173, :max-fixed-arity 2, :fn-var true, :arglists ([dataset-id] [dataset-id format]), :doc "Download form as JSON string or file in specified format if format passed."}, move-to-project {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/api/dataset.cljc", :line 217, :column 7, :end-line 217, :end-column 22, :arglists (quote ([dataset-id project-id])), :doc "Move a dataset to a project use account if no owner passed."}, :name milia.api.dataset/move-to-project, :variadic false, :file "resources/public/cljs/out/milia/api/dataset.cljc", :end-column 22, :method-params ([dataset-id project-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 217, :end-line 217, :max-fixed-arity 2, :fn-var true, :arglists (quote ([dataset-id project-id])), :doc "Move a dataset to a project use account if no owner passed."}, create-xform-meta-permissions {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/api/dataset.cljc", :line 332, :column 7, :end-line 332, :end-column 36, :arglists (quote ([dataset-id editor-meta-role dataentry-meta-role])), :doc "Integer String String -> Channel HttpResponse"}, :name milia.api.dataset/create-xform-meta-permissions, :variadic false, :file "resources/public/cljs/out/milia/api/dataset.cljc", :end-column 36, :method-params ([dataset-id editor-meta-role dataentry-meta-role]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 332, :end-line 332, :max-fixed-arity 3, :fn-var true, :arglists (quote ([dataset-id editor-meta-role dataentry-meta-role])), :doc "Integer String String -> Channel HttpResponse"}, metadata {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/api/dataset.cljc", :line 185, :column 7, :end-line 185, :end-column 15, :arglists (quote ([dataset-id & {:keys [no-cache?]}])), :doc "Show dataset metadata.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(dataset-id {:keys [no-cache?]})], :arglists ([dataset-id & {:keys [no-cache?]}]), :arglists-meta (nil)}}, :name milia.api.dataset/metadata, :variadic true, :file "resources/public/cljs/out/milia/api/dataset.cljc", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(dataset-id {:keys [no-cache?]})], :arglists ([dataset-id & {:keys [no-cache?]}]), :arglists-meta (nil)}, :method-params [(dataset-id {:keys [no-cache?]})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 185, :end-line 185, :max-fixed-arity 1, :fn-var true, :arglists ([dataset-id & {:keys [no-cache?]}]), :doc "Show dataset metadata."}, data {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/api/dataset.cljc", :line 85, :column 16, :end-line 85, :end-column 20, :export true, :arglists (quote ([dataset-id & {:keys [format raw? must-revalidate? accept-header query-params data-id], :or {:format "json"}}])), :doc "Return the data associated with a dataset.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(dataset-id {:keys [format raw? must-revalidate? accept-header query-params data-id], :or {:format "json"}})], :arglists ([dataset-id & {:keys [format raw? must-revalidate? accept-header query-params data-id], :or {:format "json"}}]), :arglists-meta (nil)}}, :name milia.api.dataset/data, :variadic true, :file "resources/public/cljs/out/milia/api/dataset.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(dataset-id {:keys [format raw? must-revalidate? accept-header query-params data-id], :or {:format "json"}})], :arglists ([dataset-id & {:keys [format raw? must-revalidate? accept-header query-params data-id], :or {:format "json"}}]), :arglists-meta (nil)}, :method-params [(dataset-id {:keys [format raw? must-revalidate? accept-header query-params data-id], :or {:format "json"}})], :protocol-impl nil, :export true, :arglists-meta (nil), :column 1, :line 85, :end-line 85, :max-fixed-arity 1, :fn-var true, :arglists ([dataset-id & {:keys [format raw? must-revalidate? accept-header query-params data-id], :or {:format "json"}}]), :doc "Return the data associated with a dataset."}, edit-history {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/api/dataset.cljc", :line 303, :column 7, :end-line 303, :end-column 19, :arglists (quote ([dataset-id instance-id])), :doc "Returns a submission's edit history"}, :name milia.api.dataset/edit-history, :variadic false, :file "resources/public/cljs/out/milia/api/dataset.cljc", :end-column 19, :method-params ([dataset-id instance-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 303, :end-line 303, :max-fixed-arity 2, :fn-var true, :arglists (quote ([dataset-id instance-id])), :doc "Returns a submission's edit history"}, add-xls-report {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/api/dataset.cljc", :line 268, :column 7, :end-line 268, :end-column 21, :arglists (quote ([dataset-id uuid filename])), :doc "Add xls report link to dataset"}, :name milia.api.dataset/add-xls-report, :variadic false, :file "resources/public/cljs/out/milia/api/dataset.cljc", :end-column 21, :method-params ([dataset-id uuid filename]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 268, :end-line 268, :max-fixed-arity 3, :fn-var true, :arglists (quote ([dataset-id uuid filename])), :doc "Add xls report link to dataset"}, update-xform-meta-permissions {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/api/dataset.cljc", :line 321, :column 7, :end-line 321, :end-column 36, :arglists (quote ([dataset-id metadata-id editor-meta-role dataentry-meta-role])), :doc "Integer Integer String String -> Channel HttpResponse"}, :name milia.api.dataset/update-xform-meta-permissions, :variadic false, :file "resources/public/cljs/out/milia/api/dataset.cljc", :end-column 36, :method-params ([dataset-id metadata-id editor-meta-role dataentry-meta-role]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 321, :end-line 321, :max-fixed-arity 4, :fn-var true, :arglists (quote ([dataset-id metadata-id editor-meta-role dataentry-meta-role])), :doc "Integer Integer String String -> Channel HttpResponse"}, tags {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/api/dataset.cljc", :line 108, :column 7, :end-line 108, :end-column 11, :arglists (quote ([dataset-id])), :doc "Returns tags for a dataset"}, :name milia.api.dataset/tags, :variadic false, :file "resources/public/cljs/out/milia/api/dataset.cljc", :end-column 11, :method-params ([dataset-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 108, :end-line 108, :max-fixed-arity 1, :fn-var true, :arglists (quote ([dataset-id])), :doc "Returns tags for a dataset"}, options-for-format {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/api/dataset.cljc", :line 125, :column 8, :end-line 125, :end-column 26, :private true, :arglists (quote ([format])), :doc "Return options needed to handle format."}, :private true, :name milia.api.dataset/options-for-format, :variadic false, :file "resources/public/cljs/out/milia/api/dataset.cljc", :end-column 26, :method-params ([format]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 125, :end-line 125, :max-fixed-arity 1, :fn-var true, :arglists (quote ([format])), :doc "Return options needed to handle format."}, online-data-entry-link {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/api/dataset.cljc", :line 191, :column 7, :end-line 191, :end-column 29, :arglists (quote ([dataset-id])), :doc "Return link to online data entry."}, :name milia.api.dataset/online-data-entry-link, :variadic false, :file "resources/public/cljs/out/milia/api/dataset.cljc", :end-column 29, :method-params ([dataset-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 191, :end-line 191, :max-fixed-arity 1, :fn-var true, :arglists (quote ([dataset-id])), :doc "Return link to online data entry."}, new-form-owner {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/api/dataset.cljc", :line 223, :column 7, :end-line 223, :end-column 21, :arglists (quote ([dataset-id new-owner])), :doc "Set a new form owner"}, :name milia.api.dataset/new-form-owner, :variadic false, :file "resources/public/cljs/out/milia/api/dataset.cljc", :end-column 21, :method-params ([dataset-id new-owner]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 223, :end-line 223, :max-fixed-arity 2, :fn-var true, :arglists (quote ([dataset-id new-owner])), :doc "Set a new form owner"}, update-sharing {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/api/dataset.cljc", :line 230, :column 7, :end-line 230, :end-column 21, :arglists (quote ([dataset-id username role])), :doc "Share dataset with specific user"}, :name milia.api.dataset/update-sharing, :variadic false, :file "resources/public/cljs/out/milia/api/dataset.cljc", :end-column 21, :method-params ([dataset-id username role]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 230, :end-line 230, :max-fixed-arity 3, :fn-var true, :arglists (quote ([dataset-id username role])), :doc "Share dataset with specific user"}, public {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/api/dataset.cljc", :line 19, :column 7, :end-line 19, :end-column 13, :arglists (quote ([username])), :doc "Return all public datasets for a specific user."}, :name milia.api.dataset/public, :variadic false, :file "resources/public/cljs/out/milia/api/dataset.cljc", :end-column 13, :method-params ([username]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([username])), :doc "Return all public datasets for a specific user."}, update {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/api/dataset.cljc", :line 64, :column 7, :end-line 64, :end-column 13, :arglists (quote ([dataset-id params])), :doc "Set the metadata for a dataset using PUT. All parameters must be passed."}, :name milia.api.dataset/update, :variadic false, :file "resources/public/cljs/out/milia/api/dataset.cljc", :end-column 13, :method-params ([dataset-id params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 2, :fn-var true, :arglists (quote ([dataset-id params])), :doc "Set the metadata for a dataset using PUT. All parameters must be passed."}, delete {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/api/dataset.cljc", :line 211, :column 7, :end-line 211, :end-column 13, :arglists (quote ([dataset-id])), :doc "Delete a dataset by ID."}, :name milia.api.dataset/delete, :variadic false, :file "resources/public/cljs/out/milia/api/dataset.cljc", :end-column 13, :method-params ([dataset-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 211, :end-line 211, :max-fixed-arity 1, :fn-var true, :arglists (quote ([dataset-id])), :doc "Delete a dataset by ID."}, download-xls-report {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/api/dataset.cljc", :line 278, :column 7, :end-line 278, :end-column 26, :arglists (quote ([dataset-id meta-id filename] [dataset-id meta-id filename data-id])), :doc "Download xls report from the j2x service", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([dataset-id meta-id filename] [dataset-id meta-id filename data-id]), :arglists ([dataset-id meta-id filename] [dataset-id meta-id filename data-id]), :arglists-meta (nil nil)}}, :name milia.api.dataset/download-xls-report, :variadic false, :file "resources/public/cljs/out/milia/api/dataset.cljc", :end-column 26, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([dataset-id meta-id filename] [dataset-id meta-id filename data-id]), :arglists ([dataset-id meta-id filename] [dataset-id meta-id filename data-id]), :arglists-meta (nil nil)}, :method-params ([dataset-id meta-id filename] [dataset-id meta-id filename data-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 278, :end-line 278, :max-fixed-arity 4, :fn-var true, :arglists ([dataset-id meta-id filename] [dataset-id meta-id filename data-id]), :doc "Download xls report from the j2x service"}, all {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/api/dataset.cljc", :line 13, :column 7, :end-line 13, :end-column 10, :arglists (quote ([username])), :doc "Return all the datasets for an account."}, :name milia.api.dataset/all, :variadic false, :file "resources/public/cljs/out/milia/api/dataset.cljc", :end-column 10, :method-params ([username]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([username])), :doc "Return all the datasets for an account."}, add-tags {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/api/dataset.cljc", :line 114, :column 7, :end-line 114, :end-column 15, :arglists (quote ([dataset-id tags])), :doc "Add tags to a dataset"}, :name milia.api.dataset/add-tags, :variadic false, :file "resources/public/cljs/out/milia/api/dataset.cljc", :end-column 15, :method-params ([dataset-id tags]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 114, :end-line 114, :max-fixed-arity 2, :fn-var true, :arglists (quote ([dataset-id tags])), :doc "Add tags to a dataset"}, filename-for-format {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/api/dataset.cljc", :line 120, :column 7, :end-line 120, :end-column 26, :arglists (quote ([dataset-id format])), :doc "Return filename taking format special cases into account."}, :name milia.api.dataset/filename-for-format, :variadic false, :file "resources/public/cljs/out/milia/api/dataset.cljc", :end-column 26, :method-params ([dataset-id format]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 2, :fn-var true, :arglists (quote ([dataset-id format])), :doc "Return filename taking format special cases into account."}, edit-link {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/api/dataset.cljc", :line 200, :column 7, :end-line 200, :end-column 16, :arglists (quote ([username project-id dataset-id instance-id])), :doc "Return link to online data entry."}, :name milia.api.dataset/edit-link, :variadic false, :file "resources/public/cljs/out/milia/api/dataset.cljc", :end-column 16, :method-params ([username project-id dataset-id instance-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 200, :end-line 200, :max-fixed-arity 4, :fn-var true, :arglists (quote ([username project-id dataset-id instance-id])), :doc "Return link to online data entry."}, link-xform-or-dataview-as-media {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/api/dataset.cljc", :line 256, :column 8, :end-line 256, :end-column 39, :arglists (quote ([object-type object-id media-filename xform-id])), :doc "Link xform or dataview as media"}, :name milia.api.dataset/link-xform-or-dataview-as-media, :variadic false, :file "resources/public/cljs/out/milia/api/dataset.cljc", :end-column 39, :method-params ([object-type object-id media-filename xform-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 2, :line 256, :end-line 256, :max-fixed-arity 4, :fn-var true, :arglists (quote ([object-type object-id media-filename xform-id])), :doc "Link xform or dataview as media"}, download-synchronously {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/api/dataset.cljc", :line 153, :column 7, :end-line 153, :end-column 29, :arglists (quote ([dataset-id format & {:keys [accept-header submission-id dataview?]}])), :doc "Download form data in specified format. The synchronicity here refers to the\n   server side. This will still return a channel, not data, in CLJS.\n   The options map (last parameter) has the following keys:\n   :accept-header Defaults to application/json\n   :submission-id The id of the submission whose data the client requires. The\n    function returns data for all submissions if this is not provided.\n   :dataview? Boolean flag indicating whether the data belongs to a filtered\n    dataview", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(dataset-id format {:keys [accept-header submission-id dataview?]})], :arglists ([dataset-id format & {:keys [accept-header submission-id dataview?]}]), :arglists-meta (nil)}}, :name milia.api.dataset/download-synchronously, :variadic true, :file "resources/public/cljs/out/milia/api/dataset.cljc", :end-column 29, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(dataset-id format {:keys [accept-header submission-id dataview?]})], :arglists ([dataset-id format & {:keys [accept-header submission-id dataview?]}]), :arglists-meta (nil)}, :method-params [(dataset-id format {:keys [accept-header submission-id dataview?]})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 153, :end-line 153, :max-fixed-arity 2, :fn-var true, :arglists ([dataset-id format & {:keys [accept-header submission-id dataview?]}]), :doc "Download form data in specified format. The synchronicity here refers to the\n   server side. This will still return a channel, not data, in CLJS.\n   The options map (last parameter) has the following keys:\n   :accept-header Defaults to application/json\n   :submission-id The id of the submission whose data the client requires. The\n    function returns data for all submissions if this is not provided.\n   :dataview? Boolean flag indicating whether the data belongs to a filtered\n    dataview"}, update-form-name {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/api/dataset.cljc", :line 79, :column 7, :end-line 79, :end-column 23, :arglists (quote ([dataset-id params])), :doc "Update the title of a form"}, :name milia.api.dataset/update-form-name, :variadic false, :file "resources/public/cljs/out/milia/api/dataset.cljc", :end-column 23, :method-params ([dataset-id params]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 79, :end-line 79, :max-fixed-arity 2, :fn-var true, :arglists (quote ([dataset-id params])), :doc "Update the title of a form"}, clone {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/api/dataset.cljc", :line 54, :column 7, :end-line 54, :end-column 12, :arglists (quote ([dataset-id username & {:keys [project-id]}])), :doc "Clone the dataset given by ID into the account with the given username.", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(dataset-id username {:keys [project-id]})], :arglists ([dataset-id username & {:keys [project-id]}]), :arglists-meta (nil)}}, :name milia.api.dataset/clone, :variadic true, :file "resources/public/cljs/out/milia/api/dataset.cljc", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(dataset-id username {:keys [project-id]})], :arglists ([dataset-id username & {:keys [project-id]}]), :arglists-meta (nil)}, :method-params [(dataset-id username {:keys [project-id]})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 54, :end-line 54, :max-fixed-arity 2, :fn-var true, :arglists ([dataset-id username & {:keys [project-id]}]), :doc "Clone the dataset given by ID into the account with the given username."}, record {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/api/dataset.cljc", :line 102, :column 7, :end-line 102, :end-column 13, :arglists (quote ([dataset-id record-id])), :doc "Retrieve a record from the dataset."}, :name milia.api.dataset/record, :variadic false, :file "resources/public/cljs/out/milia/api/dataset.cljc", :end-column 13, :method-params ([dataset-id record-id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 2, :fn-var true, :arglists (quote ([dataset-id record-id])), :doc "Retrieve a record from the dataset."}, files {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/api/dataset.cljc", :line 314, :column 7, :end-line 314, :end-column 12, :arglists (quote ([instance-id project-id & {:keys [no-cache? dataset-id]}])), :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(instance-id project-id {:keys [no-cache? dataset-id]})], :arglists ([instance-id project-id & {:keys [no-cache? dataset-id]}]), :arglists-meta (nil)}}, :name milia.api.dataset/files, :variadic true, :file "resources/public/cljs/out/milia/api/dataset.cljc", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(instance-id project-id {:keys [no-cache? dataset-id]})], :arglists ([instance-id project-id & {:keys [no-cache? dataset-id]}]), :arglists-meta (nil)}, :method-params [(instance-id project-id {:keys [no-cache? dataset-id]})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 314, :end-line 314, :max-fixed-arity 2, :fn-var true, :arglists ([instance-id project-id & {:keys [no-cache? dataset-id]}])}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:suppress-4xx-exceptions? :role :xform :description :must-revalidate? :format :get :patch :extra-params :instance :data-id :default :as :byte-array :downloadable :dataset-id :username :public :no-cache? :delete :public_data :raw? :title :formid :data_value :filename :form-params :project :raw-response? :data_type :url :query-params :post :uuid :project_id :put :accept-header :submission-id :http-options :dataview? :project-id :created_by :owner :as-map?}, :order [:get :project-id :form-params :username :project_id :post :http-options :suppress-4xx-exceptions? :created_by :description :downloadable :owner :project :public :public_data :title :uuid :put :format :raw? :must-revalidate? :accept-header :query-params :data-id :raw-response? :as :byte-array :submission-id :dataview? :default :filename :no-cache? :url :delete :formid :patch :role :data_type :data_value :xform :as-map? :dataset-id :instance :extra-params]}, :doc nil}