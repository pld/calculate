{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name milia.utils.metadata, :imports nil, :requires {milia.api.http milia.api.http, milia.utils.remote milia.utils.remote}, :uses {parse-http milia.api.http, make-url milia.utils.remote}, :defs {metadata-files {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/utils/metadata.cljc", :line 24, :column 7, :end-line 24, :end-column 21, :arglists (quote ([id-key id no-cache? & {:keys [extra-params]}])), :doc "Fetch `metadata` with query key `id-key` and value `id`.", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(id-key id no-cache? {:keys [extra-params]})], :arglists ([id-key id no-cache? & {:keys [extra-params]}]), :arglists-meta (nil)}}, :name milia.utils.metadata/metadata-files, :variadic true, :file "resources/public/cljs/out/milia/utils/metadata.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(id-key id no-cache? {:keys [extra-params]})], :arglists ([id-key id no-cache? & {:keys [extra-params]}]), :arglists-meta (nil)}, :method-params [(id-key id no-cache? {:keys [extra-params]})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 24, :end-line 24, :max-fixed-arity 3, :fn-var true, :arglists ([id-key id no-cache? & {:keys [extra-params]}]), :doc "Fetch `metadata` with query key `id-key` and value `id`."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:get :extra-params :no-cache? :query-params :content-type :json :http-options}, :order [:extra-params :get :no-cache? :http-options :query-params :content-type :json]}, :doc nil}