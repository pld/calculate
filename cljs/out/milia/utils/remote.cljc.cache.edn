{:rename-macros {}, :renames {}, :use-macros {join clojure.string}, :excludes #{}, :name milia.utils.remote, :imports nil, :requires {clojure.string clojure.string, chimera.urls chimera.urls}, :uses {join clojure.string, url chimera.urls}, :defs {timeouts {:name milia.utils.remote/timeouts, :file "resources/public/cljs/out/milia/utils/remote.cljc", :line 42, :column 1, :end-line 42, :end-column 14, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/utils/remote.cljc", :line 42, :column 6, :end-line 42, :end-column 14}, :doc "Store customizable timeouts to use in the http libraries. In milliseconds."}, make-j2x-url {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/utils/remote.cljc", :line 108, :column 7, :end-line 108, :end-column 19, :arglists (quote ([& postfix])), :doc "Build an API url.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(postfix)], :arglists ([& postfix]), :arglists-meta (nil)}}, :name milia.utils.remote/make-j2x-url, :variadic true, :file "resources/public/cljs/out/milia/utils/remote.cljc", :end-column 19, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(postfix)], :arglists ([& postfix]), :arglists-meta (nil)}, :method-params [(postfix)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 108, :end-line 108, :max-fixed-arity 0, :fn-var true, :arglists ([& postfix]), :doc "Build an API url."}, url-join {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/utils/remote.cljc", :line 84, :column 7, :end-line 84, :end-column 15, :arglists (quote ([host args]))}, :name milia.utils.remote/url-join, :variadic false, :file "resources/public/cljs/out/milia/utils/remote.cljc", :end-column 15, :method-params ([host args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 84, :end-line 84, :max-fixed-arity 2, :fn-var true, :arglists (quote ([host args]))}, make-url {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/utils/remote.cljc", :line 89, :column 7, :end-line 89, :end-column 15, :arglists (quote ([& postfix])), :doc "Build an API url.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(postfix)], :arglists ([& postfix]), :arglists-meta (nil)}}, :name milia.utils.remote/make-url, :variadic true, :file "resources/public/cljs/out/milia/utils/remote.cljc", :end-column 15, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(postfix)], :arglists ([& postfix]), :arglists-meta (nil)}, :method-params [(postfix)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 89, :end-line 89, :max-fixed-arity 0, :fn-var true, :arglists ([& postfix]), :doc "Build an API url."}, *credentials* {:name milia.utils.remote/*credentials*, :file "resources/public/cljs/out/milia/utils/remote.cljc", :line 6, :column 1, :end-line 6, :end-column 29, :dynamic true, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/utils/remote.cljc", :line 6, :column 16, :end-line 6, :end-column 29, :dynamic true}, :doc "Store credentials used to authenticate API requests.\n   Based on existence in this atom credentials will be tried in top down order."}, hosts {:name milia.utils.remote/hosts, :file "resources/public/cljs/out/milia/utils/remote.cljc", :line 30, :column 1, :end-line 30, :end-column 11, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/utils/remote.cljc", :line 30, :column 6, :end-line 30, :end-column 11}, :doc "Store remote hosts that requests are made to."}, protocol-prefixed {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/utils/remote.cljc", :line 76, :column 7, :end-line 76, :end-column 24, :arglists (quote ([resources])), :doc "Prefix the resources with the protocol and format strings."}, :name milia.utils.remote/protocol-prefixed, :variadic false, :file "resources/public/cljs/out/milia/utils/remote.cljc", :end-column 24, :method-params ([resources]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 1, :fn-var true, :arglists (quote ([resources])), :doc "Prefix the resources with the protocol and format strings."}, bad-token-msgs {:name milia.utils.remote/bad-token-msgs, :file "resources/public/cljs/out/milia/utils/remote.cljc", :line 17, :column 1, :end-line 17, :end-column 20, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/utils/remote.cljc", :line 17, :column 6, :end-line 17, :end-column 20}}, set-credentials {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/utils/remote.cljc", :line 61, :column 16, :end-line 61, :end-column 31, :export true, :arglists (quote ([username & [password temp-token token]])), :doc "Set the dynamic credentials to include the username and optionally\n   any other arguments that are passed. If an argument is nil or not passed\n   it will be set to nil in the credentials.\n\n   Calling this from Clojure will break if not done from within a previous\n   binding of the *credentials* variable.\n\n   Built to support setting hosts from JavaScript.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(username [password temp-token token])], :arglists ([username & [password temp-token token]]), :arglists-meta (nil)}}, :name milia.utils.remote/set-credentials, :variadic true, :file "resources/public/cljs/out/milia/utils/remote.cljc", :end-column 31, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(username [password temp-token token])], :arglists ([username & [password temp-token token]]), :arglists-meta (nil)}, :method-params [(username [password temp-token token])], :protocol-impl nil, :export true, :arglists-meta (nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 1, :fn-var true, :arglists ([username & [password temp-token token]]), :doc "Set the dynamic credentials to include the username and optionally\n   any other arguments that are passed. If an argument is nil or not passed\n   it will be set to nil in the credentials.\n\n   Calling this from Clojure will break if not done from within a previous\n   binding of the *credentials* variable.\n\n   Built to support setting hosts from JavaScript."}, token-expired-msg {:name milia.utils.remote/token-expired-msg, :file "resources/public/cljs/out/milia/utils/remote.cljc", :line 16, :column 1, :end-line 16, :end-column 23, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/utils/remote.cljc", :line 16, :column 6, :end-line 16, :end-column 23}}, make-client-url {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/utils/remote.cljc", :line 94, :column 7, :end-line 94, :end-column 22, :arglists (quote ([& postfix])), :doc "Build a URL pointing to the client.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(postfix)], :arglists ([& postfix]), :arglists-meta (nil)}}, :name milia.utils.remote/make-client-url, :variadic true, :file "resources/public/cljs/out/milia/utils/remote.cljc", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(postfix)], :arglists ([& postfix]), :arglists-meta (nil)}, :method-params [(postfix)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 0, :fn-var true, :arglists ([& postfix]), :doc "Build a URL pointing to the client."}, thumbor-server {:name milia.utils.remote/thumbor-server, :file "resources/public/cljs/out/milia/utils/remote.cljc", :line 82, :column 1, :end-line 82, :end-column 20, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/utils/remote.cljc", :line 82, :column 6, :end-line 82, :end-column 20}}, thumbor-host {:name milia.utils.remote/thumbor-host, :file "resources/public/cljs/out/milia/utils/remote.cljc", :line 81, :column 1, :end-line 81, :end-column 18, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/utils/remote.cljc", :line 81, :column 6, :end-line 81, :end-column 18}}, make-json-url {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/utils/remote.cljc", :line 103, :column 7, :end-line 103, :end-column 20, :arglists (quote ([& args])), :doc "Like make-url, but ensures an ending in .json", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name milia.utils.remote/make-json-url, :variadic true, :file "resources/public/cljs/out/milia/utils/remote.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 103, :end-line 103, :max-fixed-arity 0, :fn-var true, :arglists ([& args]), :doc "Like make-url, but ensures an ending in .json"}, invalid-token-msg {:name milia.utils.remote/invalid-token-msg, :file "resources/public/cljs/out/milia/utils/remote.cljc", :line 15, :column 1, :end-line 15, :end-column 23, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/utils/remote.cljc", :line 15, :column 6, :end-line 15, :end-column 23}}, set-hosts {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/milia/utils/remote.cljc", :line 47, :column 16, :end-line 47, :end-column 25, :export true, :arglists (quote ([data-host & [client-host j2x-host request-protocol]])), :doc "Swap values into hosts atom, requires data-host, other args are option but\n   must be provided in order. If an option arg is nil it is ignored, and not\n   swapped into hosts.\n\n   Built to support setting hosts from JavaScript.", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(data-host [client-host j2x-host request-protocol])], :arglists ([data-host & [client-host j2x-host request-protocol]]), :arglists-meta (nil)}}, :name milia.utils.remote/set-hosts, :variadic true, :file "resources/public/cljs/out/milia/utils/remote.cljc", :end-column 25, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(data-host [client-host j2x-host request-protocol])], :arglists ([data-host & [client-host j2x-host request-protocol]]), :arglists-meta (nil)}, :method-params [(data-host [client-host j2x-host request-protocol])], :protocol-impl nil, :export true, :arglists-meta (nil), :column 1, :line 47, :end-line 47, :max-fixed-arity 1, :fn-var true, :arglists ([data-host & [client-host j2x-host request-protocol]]), :doc "Swap values into hosts atom, requires data-host, other args are option but\n   must be provided in order. If an option arg is nil it is ignored, and not\n   swapped into hosts.\n\n   Built to support setting hosts from JavaScript."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:temp-token :password :conn-timeout :j2x :username :client :request-protocol :socket-timeout :token :data}, :order [:temp-token :token :username :password :client :data :j2x :request-protocol :conn-timeout :socket-timeout]}, :doc nil}