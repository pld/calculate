{:rename-macros {}, :renames {}, :use-macros {html sablono.core, go cljs.core.async.macros}, :excludes #{}, :name calculon.components, :imports nil, :requires {gstring goog.string, dataset milia.api.dataset, remote milia.utils.remote, goog.string goog.string, cljs-http.client cljs-http.client, cljs.core.async cljs.core.async, chimera.seq chimera.seq, sablono.core sablono.core, goog.string.format goog.string.format, milia.utils.remote milia.utils.remote, http cljs-http.client, milia.api.dataset milia.api.dataset}, :uses {update-values chimera.seq, <! cljs.core.async, transpose chimera.seq, in? chimera.seq}, :defs {variance* {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 39, :column 7, :end-line 39, :end-column 16, :arglists (quote ([l]))}, :name calculon.components/variance*, :variadic false, :file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :end-column 16, :method-params ([l]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 1, :fn-var true, :arglists (quote ([l]))}, normalize-counts {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 76, :column 8, :end-line 76, :end-column 24, :private true, :arglists (quote ([freqs & {:keys [val], :or {val 1}}])), :doc "Returns a normalized frequency count. If all frequencies are 0 returns {}.\n   `freqs` a map of frequencies\n   `val` the number the counts should add up to", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(freqs {:keys [val], :or {val 1}})], :arglists ([freqs & {:keys [val], :or {val 1}}]), :arglists-meta (nil)}}, :private true, :name calculon.components/normalize-counts, :variadic true, :file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :end-column 24, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(freqs {:keys [val], :or {val 1}})], :arglists ([freqs & {:keys [val], :or {val 1}}]), :arglists-meta (nil)}, :method-params [(freqs {:keys [val], :or {val 1}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 76, :end-line 76, :max-fixed-arity 1, :fn-var true, :arglists ([freqs & {:keys [val], :or {val 1}}]), :doc "Returns a normalized frequency count. If all frequencies are 0 returns {}.\n   `freqs` a map of frequencies\n   `val` the number the counts should add up to"}, get-data {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 203, :column 7, :end-line 203, :end-column 15, :arglists (quote ([state]))}, :name calculon.components/get-data, :variadic false, :file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :end-column 15, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 203, :end-line 203, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, std {:name calculon.components/std, :file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 48, :column 1, :end-line 48, :end-column 9, :meta {:file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 48, :column 6, :end-line 48, :end-column 9}}, linspace {:name calculon.components/linspace, :file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 57, :column 1, :end-line 57, :end-column 14, :meta {:file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 57, :column 6, :end-line 57, :end-column 14}}, get-class {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 227, :column 8, :end-line 227, :end-column 17, :private true, :arglists (quote ([score scores]))}, :private true, :name calculon.components/get-class, :variadic false, :file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :end-column 17, :method-params ([score scores]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 227, :end-line 227, :max-fixed-arity 2, :fn-var true, :arglists (quote ([score scores]))}, normalize {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 84, :column 8, :end-line 84, :end-column 17, :private true, :arglists (quote ([m])), :doc "Divides everything in `m` by the median of the values. If the median is less\n   than 1 / the number of entries, it divides everything by the number of\n   entries."}, :private true, :name calculon.components/normalize, :variadic false, :file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :end-column 17, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 84, :end-line 84, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Divides everything in `m` by the median of the values. If the median is less\n   than 1 / the number of entries, it divides everything by the number of\n   entries."}, compute-averages {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 182, :column 7, :end-line 182, :end-column 23, :arglists (quote ([cols->scores]))}, :name calculon.components/compute-averages, :variadic false, :file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :end-column 23, :method-params ([cols->scores]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 182, :end-line 182, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cols->scores]))}, category-like? {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 61, :column 8, :end-line 61, :end-column 22, :private true, :arglists (quote ([v])), :doc "Return true if v looks like a category. We expect v is a category if the\n   proportion of distinct values is less than the constant proportion-unique,\n   where we ignore blanks or values that we think represent n/a strings."}, :private true, :name calculon.components/category-like?, :variadic false, :file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :end-column 22, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 61, :end-line 61, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Return true if v looks like a category. We expect v is a category if the\n   proportion of distinct values is less than the constant proportion-unique,\n   where we ignore blanks or values that we think represent n/a strings."}, sum {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 19, :column 7, :end-line 19, :end-column 10, :arglists (quote ([l]))}, :name calculon.components/sum, :variadic false, :file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :end-column 10, :method-params ([l]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 19, :end-line 19, :max-fixed-arity 1, :fn-var true, :arglists (quote ([l]))}, na-string {:name calculon.components/na-string, :file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 14, :column 1, :end-line 14, :end-column 15, :meta {:file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 14, :column 6, :end-line 14, :end-column 15}}, data-loader {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 258, :column 7, :end-line 258, :end-column 18, :arglists (quote ([state]))}, :name calculon.components/data-loader, :variadic false, :file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :end-column 18, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 258, :end-line 258, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, mean* {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 33, :column 7, :end-line 33, :end-column 12, :arglists (quote ([l]))}, :name calculon.components/mean*, :variadic false, :file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :end-column 12, :method-params ([l]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 1, :fn-var true, :arglists (quote ([l]))}, proportion-unique {:name calculon.components/proportion-unique, :file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 15, :column 1, :end-line 15, :end-column 23, :meta {:file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 15, :column 6, :end-line 15, :end-column 23}}, dataset-id-select {:name calculon.components/dataset-id-select, :file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 225, :column 1, :end-line 225, :end-column 23, :meta {:file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 225, :column 6, :end-line 225, :end-column 23}}, default-json-url {:name calculon.components/default-json-url, :file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 193, :column 1, :end-line 193, :end-column 22, :meta {:file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 193, :column 6, :end-line 193, :end-column 22}}, mean {:name calculon.components/mean, :file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 37, :column 1, :end-line 37, :end-column 10, :meta {:file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 37, :column 6, :end-line 37, :end-column 10}}, aggregation-col-id {:name calculon.components/aggregation-col-id, :file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 223, :column 1, :end-line 223, :end-column 24, :meta {:file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 223, :column 6, :end-line 223, :end-column 24}}, dataset-id-enter {:name calculon.components/dataset-id-enter, :file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 224, :column 1, :end-line 224, :end-column 22, :meta {:file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 224, :column 6, :end-line 224, :end-column 22}}, variance {:name calculon.components/variance, :file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 44, :column 1, :end-line 44, :end-column 14, :meta {:file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 44, :column 6, :end-line 44, :end-column 14}}, std* {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 46, :column 7, :end-line 46, :end-column 11, :arglists (quote ([l]))}, :name calculon.components/std*, :variadic false, :file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :end-column 11, :method-params ([l]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([l]))}, get-datasets {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 195, :column 7, :end-line 195, :end-column 19, :arglists (quote ([state]))}, :name calculon.components/get-datasets, :variadic false, :file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :end-column 19, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 195, :end-line 195, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, median* {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 23, :column 7, :end-line 23, :end-column 14, :arglists (quote ([ns]))}, :name calculon.components/median*, :variadic false, :file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :end-column 14, :method-params ([ns]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ns]))}, get-aggregation-col {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 248, :column 8, :end-line 248, :end-column 27, :private true, :arglists (quote ([]))}, :private true, :name calculon.components/get-aggregation-col, :variadic false, :file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :end-column 27, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 248, :end-line 248, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, json-list->col-vectors {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 128, :column 8, :end-line 128, :end-column 30, :private true, :arglists (quote ([json-list & [ignored-values]])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(json-list [ignored-values])], :arglists ([json-list & [ignored-values]]), :arglists-meta (nil)}}, :private true, :name calculon.components/json-list->col-vectors, :variadic true, :file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :end-column 30, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(json-list [ignored-values])], :arglists ([json-list & [ignored-values]]), :arglists-meta (nil)}, :method-params [(json-list [ignored-values])], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 128, :end-line 128, :max-fixed-arity 1, :fn-var true, :arglists ([json-list & [ignored-values]])}, run-algorithm {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 143, :column 7, :end-line 143, :end-column 20, :arglists (quote ([data aggregation-col & {:keys [categorical-cols null-responses], :or {null-responses [na-string nil]}}])), :doc "Run the S-Value algorithm.\n   `data` list of hash-maps with the same keys, each is a row\n   `aggregation-col` key in the maps to aggregate using\n   `categorical-cols` list of keys in maps to ran algorithm against", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(data aggregation-col {:keys [categorical-cols null-responses], :or {null-responses [na-string nil]}})], :arglists ([data aggregation-col & {:keys [categorical-cols null-responses], :or {null-responses [na-string nil]}}]), :arglists-meta (nil)}}, :name calculon.components/run-algorithm, :variadic true, :file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(data aggregation-col {:keys [categorical-cols null-responses], :or {null-responses [na-string nil]}})], :arglists ([data aggregation-col & {:keys [categorical-cols null-responses], :or {null-responses [na-string nil]}}]), :arglists-meta (nil)}, :method-params [(data aggregation-col {:keys [categorical-cols null-responses], :or {null-responses [na-string nil]}})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 143, :end-line 143, :max-fixed-arity 2, :fn-var true, :arglists ([data aggregation-col & {:keys [categorical-cols null-responses], :or {null-responses [na-string nil]}}]), :doc "Run the S-Value algorithm.\n   `data` list of hash-maps with the same keys, each is a row\n   `aggregation-col` key in the maps to aggregate using\n   `categorical-cols` list of keys in maps to ran algorithm against"}, get-json-url {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 214, :column 7, :end-line 214, :end-column 19, :arglists (quote ([state]))}, :name calculon.components/get-json-url, :variadic false, :file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :end-column 19, :method-params ([state]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 214, :end-line 214, :max-fixed-arity 1, :fn-var true, :arglists (quote ([state]))}, linspace* {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 50, :column 7, :end-line 50, :end-column 16, :arglists (quote ([x1 x2 n])), :doc "Generates n evenly-spaced points, with distance (x2-x1)/(n-1) between\n   points."}, :name calculon.components/linspace*, :variadic false, :file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :end-column 16, :method-params ([x1 x2 n]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x1 x2 n])), :doc "Generates n evenly-spaced points, with distance (x2-x1)/(n-1) between\n   points."}, median {:name calculon.components/median, :file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 31, :column 1, :end-line 31, :end-column 12, :meta {:file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 31, :column 6, :end-line 31, :end-column 12}}, get-dataset-id {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 252, :column 8, :end-line 252, :end-column 22, :private true, :arglists (quote ([]))}, :private true, :name calculon.components/get-dataset-id, :variadic false, :file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :end-column 22, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 252, :end-line 252, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, get-categorical-cols {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 70, :column 8, :end-line 70, :end-column 28, :private true, :arglists (quote ([cols->data]))}, :private true, :name calculon.components/get-categorical-cols, :variadic false, :file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :end-column 28, :method-params ([cols->data]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cols->data]))}, get-selected-value {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 242, :column 7, :end-line 242, :end-column 25, :arglists (quote ([id]))}, :name calculon.components/get-selected-value, :variadic false, :file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :end-column 25, :method-params ([id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 242, :end-line 242, :max-fixed-arity 1, :fn-var true, :arglists (quote ([id]))}, full-name {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 238, :column 8, :end-line 238, :end-column 17, :private true, :arglists (quote ([x]))}, :private true, :name calculon.components/full-name, :variadic false, :file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :end-column 17, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 238, :end-line 238, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, compute-outlier-scores {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :line 93, :column 8, :end-line 93, :end-column 30, :private true, :arglists (quote ([agg->freqs]))}, :private true, :name calculon.components/compute-outlier-scores, :variadic false, :file "/Users/kg/Projects/ona/calculon/src/calculon/components.cljs", :end-column 30, :method-params ([agg->freqs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 93, :end-line 93, :max-fixed-arity 1, :fn-var true, :arglists (quote ([agg->freqs]))}}, :require-macros {cljs.core.async.macros cljs.core.async.macros, sablono.core sablono.core}, :cljs.analyzer/constants {:seen #{:thead :input#url :datasets :tbody :table :key :limit :else :categorical-cols :null-responses :password :input#username :input#password :td :value :dataset-id :th :tr :username :val :recur :type :onBlur :json-url :size :title :style :div :option :formid :td.column-names :with-credentials? :th.column-names :status :tr.highlight :id :span.highlight :query-params :aggregation-col :input :p.grouping :span.disjunction-spacer :h3 :body :p :onClick :select :data}, :order [:data :val :categorical-cols :null-responses :recur :username :password :datasets :body :status :else :aggregation-col :dataset-id :limit :query-params :json-url :with-credentials? :h3 :p :span.highlight :input#url :onBlur :size :value :input :type :onClick :span.disjunction-spacer :input#username :input#password :select :id :key :formid :title :option :p.grouping :div :table :thead :tr.highlight :th.column-names :th :tbody :tr :td.column-names :td :style]}, :doc nil}