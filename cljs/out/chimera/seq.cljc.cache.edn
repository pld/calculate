{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name chimera.seq, :imports nil, :requires {string clojure.string, clojure.string clojure.string, chimera.string chimera.string, clj-set clojure.set, clojure.set clojure.set}, :uses {substring? chimera.string}, :defs {has-keys? {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/chimera/seq.cljc", :line 28, :column 7, :end-line 28, :end-column 16, :arglists (quote ([m keys])), :doc "True is map has all these keys."}, :name chimera.seq/has-keys?, :variadic false, :file "resources/public/cljs/out/chimera/seq.cljc", :end-column 16, :method-params ([m keys]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 28, :end-line 28, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m keys])), :doc "True is map has all these keys."}, union {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/chimera/seq.cljc", :line 181, :column 7, :end-line 181, :end-column 12, :arglists (quote ([a b])), :doc "Merges two sequeneces"}, :name chimera.seq/union, :variadic false, :file "resources/public/cljs/out/chimera/seq.cljc", :end-column 12, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 181, :end-line 181, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b])), :doc "Merges two sequeneces"}, update-values {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/chimera/seq.cljc", :line 46, :column 7, :end-line 46, :end-column 20, :arglists (quote ([m f & args])), :doc "Apply a function to each value of a map. From http://goo.gl/JdwzZf", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(m f args)], :arglists ([m f & args]), :arglists-meta (nil)}}, :name chimera.seq/update-values, :variadic true, :file "resources/public/cljs/out/chimera/seq.cljc", :end-column 20, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(m f args)], :arglists ([m f & args]), :arglists-meta (nil)}, :method-params [(m f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 2, :fn-var true, :arglists ([m f & args]), :doc "Apply a function to each value of a map. From http://goo.gl/JdwzZf"}, positions {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/chimera/seq.cljc", :line 139, :column 7, :end-line 139, :end-column 16, :arglists (quote ([pred coll])), :doc "Returns the position of at which pred is true for items in coll."}, :name chimera.seq/positions, :variadic false, :file "resources/public/cljs/out/chimera/seq.cljc", :end-column 16, :method-params ([pred coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 139, :end-line 139, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred coll])), :doc "Returns the position of at which pred is true for items in coll."}, filter-collection {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/chimera/seq.cljc", :line 110, :column 7, :end-line 110, :end-column 24, :arglists (quote ([k v collection])), :doc "Keeps values in list maps where k value matchs v"}, :name chimera.seq/filter-collection, :variadic false, :file "resources/public/cljs/out/chimera/seq.cljc", :end-column 24, :method-params ([k v collection]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 3, :fn-var true, :arglists (quote ([k v collection])), :doc "Keeps values in list maps where k value matchs v"}, select-value {:name chimera.seq/select-value, :file "resources/public/cljs/out/chimera/seq.cljc", :line 18, :column 1, :end-line 18, :end-column 18, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/chimera/seq.cljc", :line 18, :column 6, :end-line 18, :end-column 18}}, diff {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/chimera/seq.cljc", :line 171, :column 7, :end-line 171, :end-column 11, :arglists (quote ([a b])), :doc "Return difference between 2 sequences."}, :name chimera.seq/diff, :variadic false, :file "resources/public/cljs/out/chimera/seq.cljc", :end-column 11, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 171, :end-line 171, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b])), :doc "Return difference between 2 sequences."}, indexed {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/chimera/seq.cljc", :line 198, :column 7, :end-line 198, :end-column 14, :arglists (quote ([coll])), :doc "Given a seq, produces a two-el seq. [a b c] => [[0 a] [1 b] [2 c]]."}, :name chimera.seq/indexed, :variadic false, :file "resources/public/cljs/out/chimera/seq.cljc", :end-column 14, :method-params ([coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 198, :end-line 198, :max-fixed-arity 1, :fn-var true, :arglists (quote ([coll])), :doc "Given a seq, produces a two-el seq. [a b c] => [[0 a] [1 b] [2 c]]."}, flatten-map {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/chimera/seq.cljc", :line 155, :column 7, :end-line 155, :end-column 18, :arglists (quote ([form] [form separator] [form separator prefix])), :doc "Basically lifted from http://stackoverflow.com/a/17902228/420386", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([form] [form separator] [form separator prefix]), :arglists ([form] [form separator] [form separator prefix]), :arglists-meta (nil nil nil)}}, :name chimera.seq/flatten-map, :variadic false, :file "resources/public/cljs/out/chimera/seq.cljc", :end-column 18, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([form] [form separator] [form separator prefix]), :arglists ([form] [form separator] [form separator prefix]), :arglists-meta (nil nil nil)}, :method-params ([form] [form separator] [form separator prefix]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 155, :end-line 155, :max-fixed-arity 3, :fn-var true, :arglists ([form] [form separator] [form separator prefix]), :doc "Basically lifted from http://stackoverflow.com/a/17902228/420386"}, duplicates {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/chimera/seq.cljc", :line 23, :column 7, :end-line 23, :end-column 17, :arglists (quote ([l])), :doc "Return a list of all items that appear more than once in a sequence."}, :name chimera.seq/duplicates, :variadic false, :file "resources/public/cljs/out/chimera/seq.cljc", :end-column 17, :method-params ([l]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 1, :fn-var true, :arglists (quote ([l])), :doc "Return a list of all items that appear more than once in a sequence."}, remove-nil {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/chimera/seq.cljc", :line 186, :column 7, :end-line 186, :end-column 17, :arglists (quote ([l])), :doc "Remove nil values from a sequence."}, :name chimera.seq/remove-nil, :variadic false, :file "resources/public/cljs/out/chimera/seq.cljc", :end-column 17, :method-params ([l]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 186, :end-line 186, :max-fixed-arity 1, :fn-var true, :arglists (quote ([l])), :doc "Remove nil values from a sequence."}, filter-first {:name chimera.seq/filter-first, :file "resources/public/cljs/out/chimera/seq.cljc", :line 12, :column 1, :end-line 12, :end-column 18, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/chimera/seq.cljc", :line 12, :column 6, :end-line 12, :end-column 18}}, deep-merge {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/chimera/seq.cljc", :line 96, :column 7, :end-line 96, :end-column 17, :arglists (quote ([& maps])), :doc "Deep merge any number of maps.", :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(maps)], :arglists ([& maps]), :arglists-meta (nil)}}, :name chimera.seq/deep-merge, :variadic true, :file "resources/public/cljs/out/chimera/seq.cljc", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(maps)], :arglists ([& maps]), :arglists-meta (nil)}, :method-params [(maps)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 96, :end-line 96, :max-fixed-arity 0, :fn-var true, :arglists ([& maps]), :doc "Deep merge any number of maps."}, concatv {:name chimera.seq/concatv, :file "resources/public/cljs/out/chimera/seq.cljc", :line 8, :column 1, :end-line 8, :end-column 13, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/chimera/seq.cljc", :line 8, :column 6, :end-line 8, :end-column 13}, :doc "Concat then turn into vector"}, mapply {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/chimera/seq.cljc", :line 38, :column 7, :end-line 38, :end-column 13, :arglists (quote ([f & args])), :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(f args)], :arglists ([f & args]), :arglists-meta (nil)}}, :name chimera.seq/mapply, :variadic true, :file "resources/public/cljs/out/chimera/seq.cljc", :end-column 13, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(f args)], :arglists ([f & args]), :arglists-meta (nil)}, :method-params [(f args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 38, :end-line 38, :max-fixed-arity 1, :fn-var true, :arglists ([f & args])}, transpose {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/chimera/seq.cljc", :line 203, :column 7, :end-line 203, :end-column 16, :arglists (quote ([m]))}, :name chimera.seq/transpose, :variadic false, :file "resources/public/cljs/out/chimera/seq.cljc", :end-column 16, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 203, :end-line 203, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m]))}, dissoc-vec {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/chimera/seq.cljc", :line 81, :column 7, :end-line 81, :end-column 17, :arglists (quote ([coll pos])), :doc "Removes elem from a vector by its position."}, :name chimera.seq/dissoc-vec, :variadic false, :file "resources/public/cljs/out/chimera/seq.cljc", :end-column 17, :method-params ([coll pos]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 2, :fn-var true, :arglists (quote ([coll pos])), :doc "Removes elem from a vector by its position."}, update-map-in-list {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/chimera/seq.cljc", :line 149, :column 7, :end-line 149, :end-column 25, :arglists (quote ([list map-to-update key-to-match])), :doc "Update map value in list based on key match"}, :name chimera.seq/update-map-in-list, :variadic false, :file "resources/public/cljs/out/chimera/seq.cljc", :end-column 25, :method-params ([list map-to-update key-to-match]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 149, :end-line 149, :max-fixed-arity 3, :fn-var true, :arglists (quote ([list map-to-update key-to-match])), :doc "Update map value in list based on key match"}, in? {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/chimera/seq.cljc", :line 33, :column 7, :end-line 33, :end-column 10, :arglists (quote ([list elem])), :doc "True if elem is in list, false otherwise."}, :name chimera.seq/in?, :variadic false, :file "resources/public/cljs/out/chimera/seq.cljc", :end-column 10, :method-params ([list elem]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 2, :fn-var true, :arglists (quote ([list elem])), :doc "True if elem is in list, false otherwise."}, not-empty? {:name chimera.seq/not-empty?, :file "resources/public/cljs/out/chimera/seq.cljc", :line 14, :column 1, :end-line 14, :end-column 16, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/chimera/seq.cljc", :line 14, :column 6, :end-line 14, :end-column 16}}, sort-by-name {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/chimera/seq.cljc", :line 64, :column 7, :end-line 64, :end-column 19, :arglists (quote ([sort-by-key collection]))}, :name chimera.seq/sort-by-name, :variadic false, :file "resources/public/cljs/out/chimera/seq.cljc", :end-column 19, :method-params ([sort-by-key collection]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 2, :fn-var true, :arglists (quote ([sort-by-key collection]))}, remove-falsey-values {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/chimera/seq.cljc", :line 120, :column 7, :end-line 120, :end-column 27, :arglists (quote ([a-map])), :doc "Remove map entries where the value is falsey."}, :name chimera.seq/remove-falsey-values, :variadic false, :file "resources/public/cljs/out/chimera/seq.cljc", :end-column 27, :method-params ([a-map]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 120, :end-line 120, :max-fixed-arity 1, :fn-var true, :arglists (quote ([a-map])), :doc "Remove map entries where the value is falsey."}, select-values {:name chimera.seq/select-values, :file "resources/public/cljs/out/chimera/seq.cljc", :line 16, :column 1, :end-line 16, :end-column 19, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/chimera/seq.cljc", :line 16, :column 6, :end-line 16, :end-column 19}}, toggle {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/chimera/seq.cljc", :line 191, :column 7, :end-line 191, :end-column 13, :arglists (quote ([coll x])), :doc "Removes x from coll if present, and adds if absent."}, :name chimera.seq/toggle, :variadic false, :file "resources/public/cljs/out/chimera/seq.cljc", :end-column 13, :method-params ([coll x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 191, :end-line 191, :max-fixed-arity 2, :fn-var true, :arglists (quote ([coll x])), :doc "Removes x from coll if present, and adds if absent."}, map-list->map {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/chimera/seq.cljc", :line 207, :column 7, :end-line 207, :end-column 20, :arglists (quote ([map-list k v])), :doc "Get the first map from a list of maps with the given value for key."}, :name chimera.seq/map-list->map, :variadic false, :file "resources/public/cljs/out/chimera/seq.cljc", :end-column 20, :method-params ([map-list k v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 207, :end-line 207, :max-fixed-arity 3, :fn-var true, :arglists (quote ([map-list k v])), :doc "Get the first map from a list of maps with the given value for key."}, filter-out-collection {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/chimera/seq.cljc", :line 115, :column 7, :end-line 115, :end-column 28, :arglists (quote ([k v collection])), :doc "Removes values in list maps where k value matchs cond"}, :name chimera.seq/filter-out-collection, :variadic false, :file "resources/public/cljs/out/chimera/seq.cljc", :end-column 28, :method-params ([k v collection]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 115, :end-line 115, :max-fixed-arity 3, :fn-var true, :arglists (quote ([k v collection])), :doc "Removes values in list maps where k value matchs cond"}, ordered-diff {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/chimera/seq.cljc", :line 176, :column 7, :end-line 176, :end-column 19, :arglists (quote ([a b])), :doc "Return difference between 2 sequences. Preserves ordering in first seq."}, :name chimera.seq/ordered-diff, :variadic false, :file "resources/public/cljs/out/chimera/seq.cljc", :end-column 19, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 176, :end-line 176, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b])), :doc "Return difference between 2 sequences. Preserves ordering in first seq."}, search-collection {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/chimera/seq.cljc", :line 125, :column 7, :end-line 125, :end-column 24, :arglists (quote ([query collection k] [query collection k case-insensitive?])), :doc "Return collections with a key matching the query.", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([query collection k] [query collection k case-insensitive?]), :arglists ([query collection k] [query collection k case-insensitive?]), :arglists-meta (nil nil)}}, :name chimera.seq/search-collection, :variadic false, :file "resources/public/cljs/out/chimera/seq.cljc", :end-column 24, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([query collection k] [query collection k case-insensitive?]), :arglists ([query collection k] [query collection k case-insensitive?]), :arglists-meta (nil nil)}, :method-params ([query collection k] [query collection k case-insensitive?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 125, :end-line 125, :max-fixed-arity 4, :fn-var true, :arglists ([query collection k] [query collection k case-insensitive?]), :doc "Return collections with a key matching the query."}, assoc-in-multi {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/chimera/seq.cljc", :line 86, :column 7, :end-line 86, :end-column 21, :arglists (quote ([coll & args])), :doc "Like core/assoc-in but accepting multiple key vectors and values\n   (assoc-in* coll & args)", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(coll args)], :arglists ([coll & args]), :arglists-meta (nil)}}, :name chimera.seq/assoc-in-multi, :variadic true, :file "resources/public/cljs/out/chimera/seq.cljc", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [(coll args)], :arglists ([coll & args]), :arglists-meta (nil)}, :method-params [(coll args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 86, :end-line 86, :max-fixed-arity 1, :fn-var true, :arglists ([coll & args]), :doc "Like core/assoc-in but accepting multiple key vectors and values\n   (assoc-in* coll & args)"}, sort-by-category {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/chimera/seq.cljc", :line 40, :column 7, :end-line 40, :end-column 23, :arglists (quote ([sort-by-key collection]))}, :name chimera.seq/sort-by-category, :variadic false, :file "resources/public/cljs/out/chimera/seq.cljc", :end-column 23, :method-params ([sort-by-key collection]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 40, :end-line 40, :max-fixed-arity 2, :fn-var true, :arglists (quote ([sort-by-key collection]))}, index-of {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/chimera/seq.cljc", :line 144, :column 7, :end-line 144, :end-column 15, :arglists (quote ([coll item])), :doc "Returns index of an item within a collection."}, :name chimera.seq/index-of, :variadic false, :file "resources/public/cljs/out/chimera/seq.cljc", :end-column 15, :method-params ([coll item]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 144, :end-line 144, :max-fixed-arity 2, :fn-var true, :arglists (quote ([coll item])), :doc "Returns index of an item within a collection."}, fn-collection {:protocol-inline nil, :meta {:file "/Users/kg/Projects/ona/calculon/resources/public/cljs/out/chimera/seq.cljc", :line 105, :column 7, :end-line 105, :end-column 20, :arglists (quote ([func k v collection])), :doc "Apply func to pred matching k value to v."}, :name chimera.seq/fn-collection, :variadic false, :file "resources/public/cljs/out/chimera/seq.cljc", :end-column 20, :method-params ([func k v collection]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 105, :end-line 105, :max-fixed-arity 4, :fn-var true, :arglists (quote ([func k v collection])), :doc "Apply func to pred matching k value to v."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:else :metadata}, :order [:metadata :else]}, :doc nil}